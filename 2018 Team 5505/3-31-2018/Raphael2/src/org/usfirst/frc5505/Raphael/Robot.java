// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.Raphael;

import edu.wpi.first.wpilibj.TimedRobot;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.CameraServer;

import org.usfirst.frc5505.Raphael.commands.*;
import org.usfirst.frc5505.Raphael.subsystems.*;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SPI;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

	
    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static drive drive;
    public static intake intake;
    public static climber climber;
    public static intakePitch intakePitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drive = new drive();
        intake = new intake();
        climber = new climber();
        intakePitch = new intakePitch();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        chooser.addDefault("Nothing", new AutonomousCommand());
        chooser.addObject("Baseline", new Baseline());
        chooser.addObject("Center Switch", new CenterSwitch());
        chooser.addObject("Left Switch", new LeftSwitchBaseline());
        chooser.addObject("Left Scale", new LeftScaleBaseline());
        chooser.addObject("Left Switch Scale", new LeftSwitchScale());
        chooser.addObject("Left Scale Switch", new LeftScaleSwitch());
        chooser.addObject("Left Scale Cross Scale", new LeftScaleCrossScale());
        chooser.addObject("Right Switch", new RightSwitchBaseline());
        chooser.addObject("Right Scale", new RightScaleBaseline());
        chooser.addObject("Right Switch Scale", new RightSwitchScale());
        chooser.addObject("Right Scale Switch", new RightScaleSwitch());
        chooser.addObject("Right Scale Cross Scale", new RightScaleCrossScale());
        chooser.addObject("Double Right Baseline", new DoubleRightBaseline());
        chooser.addObject("Double Right Switch Scale", new DoubleRightSwitchScale());
        chooser.addObject("Double Right Scale Switch", new DoubleRightScaleSwitch());
        chooser.addObject("Double Right Scale Cross Scale", new DoubleRightScaleCrossScale());
     
        
        
        SmartDashboard.putData("Auto mode", chooser);
        
    	CameraServer.getInstance().startAutomaticCapture("Main Camera", 0);
    	
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
    	Robot.drive.setFollowers();
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	Robot.drive.setFollowers();
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    	Robot.drive.setFollowers();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
