// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.Raphael.subsystems;

import org.usfirst.frc5505.Raphael.RobotMap;
import org.usfirst.frc5505.Raphael.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class climber extends Subsystem {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX climbTalon1 = RobotMap.climberclimbTalon1;
    private final WPI_TalonSRX climbTalon2 = RobotMap.climberclimbTalon2;
    private final WPI_TalonSRX elevadorTalon = RobotMap.climberelevadorTalon;
    private final DoubleSolenoid hookPiston = RobotMap.climberhookPiston;
    private final DoubleSolenoid shifterSolenoid = RobotMap.climbershifterSolenoid;
    private final WPI_TalonSRX elevadorTalon2 = RobotMap.climberelevadorTalon2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	
        shifterSolenoid.set(DoubleSolenoid.Value.kForward);

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	SmartDashboard.putNumber("Climb Counter", getEncoderCount());
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void extendHookPiston() {
    	hookPiston.set(DoubleSolenoid.Value.kForward);
    }
    
    public void retractHookPiston() {
    	hookPiston.set(DoubleSolenoid.Value.kReverse);
    }
    
	public void shift() {
		if (shifterSolenoid.get() != DoubleSolenoid.Value.kForward) {
			shifterSolenoid.set(DoubleSolenoid.Value.kForward);
			SmartDashboard.putBoolean("Gear", true);
		} else {
			shifterSolenoid.set(DoubleSolenoid.Value.kReverse);
			SmartDashboard.putBoolean("Gear", false);
		}
	}
    
    public void climbUp() {
    	climbTalon1.set(1);
    	climbTalon2.set(-1);
    }
 
    public void climbDown() {
    	climbTalon1.set(-1);
    	climbTalon2.set(1);
    }
    
    public void stopClimb() {
    	climbTalon1.set(0);
    	climbTalon2.set(0);
    }
     
    public void elevateUp() {
    	double speed = 1;
    	elevadorTalon.set(speed);
    	elevadorTalon2.set(speed);
    }
    
    public void elevateDown() {
    	double speed = .80;
    	elevadorTalon.set(-speed);
    	elevadorTalon2.set(-speed);
    }
    
    public void stopElevate() {
    	elevadorTalon.set(0);
    	elevadorTalon2.set(0);
    }
    
    public int getEncoderCount() {
    	return elevadorTalon.getSensorCollection().getQuadraturePosition();
    }
    
    public void elevate(double speed) {
    	elevadorTalon.set(speed);
    	elevadorTalon2.set(speed);
    }

}

