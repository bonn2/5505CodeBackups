// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5505.Raphael.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.omg.CORBA.TIMEOUT;
import org.usfirst.frc5505.Raphael.Robot;


/**
 *
 */
public class turnRobot extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_degreeRotation;
    private double m_speed;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    public boolean inRange;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public turnRobot(double degreeRotation, double speed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_degreeRotation = degreeRotation;
        m_speed = speed;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
      //  Robot.drive.zeroAngle();
      //inRange = false;     //  Idea if it broken  
      //Robot.drive.zeroAngle();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
      requires(Robot.drive);
    }
    
    public turnRobot() {
    	
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
		inRange = false;
		Robot.drive.zeroAngle();
		
			if (m_degreeRotation < 0) 
				Robot.drive.turnLeft(m_speed);
			 else 
				Robot.drive.turnRight(m_speed);
    }
 
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
		double give = 2;
		if (Math.abs(Robot.drive.getAngle()) >= Math.abs(m_degreeRotation)-give) {
			inRange = true;
		}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return inRange;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	Robot.drive.stop();
    }
}
